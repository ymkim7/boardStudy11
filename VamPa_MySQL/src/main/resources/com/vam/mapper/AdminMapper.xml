<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.vam.mapper.AdminMapper">

	<!-- 작가 등록 -->
  	<insert id="bookEnroll">
  		<selectKey resultType="int" keyProperty="bookId" order="AFTER">
  			SELECT LAST_INSERT_ID()
  		</selectKey>
  		
  		insert into vam_book (
  			bookName
  			, authorId
  			, publeYear
  			, publisher
  			, cateCode
  			, bookPrice
  			, bookStock
  			, bookDiscount
  			, bookIntro
  			, bookContents
  		) values (
  			#{bookName}
  			, #{authorId}
  			, #{publeYear}
  			, #{publisher}
  			, #{cateCode}
  			, #{bookPrice}
  			, #{bookStock}
  			, #{bookDiscount}
  			, #{bookIntro}
  			, #{bookContents}
  		)
  	</insert>
  	
	<!-- 카테고리 리스트 -->
  	<select id="cateList" resultType="com.vam.model.CateVO">
  		select *
  		from vam_bcate
  		order by cateCode
  	</select>
  	
  	<!-- 상품 리스트 -->
	<select id="goodsGetList" resultType="com.vam.model.BookVO">
		select  bookId
			, bookName
			,  b.authorName
			, c.cateName
			, bookStock
			, a.regDate
		from vam_book a 
		left outer join vam_author b on a.authorId = b.authorId
		left outer join vam_bcate c on a.cateCode = c.cateCode
	<if test="keyword != null">
		where (bookName like CONCAT ('%', #{keyword}, '%'))
	</if>
		order by bookId DESC
		limit #{skip}, #{amount}		
	</select>
  	
  	<!-- 상품 총 갯수 -->
  	<select id="goodsGetTotal" resultType="int">
  		select count(*)
  		from vam_book
	<if test="keyword != null">
		where bookName like CONCAT('%' , #{keyword}, '%')
	</if>
  	</select>
  	
  	<!-- 상품 조회 페이지 -->
	<select id="goodsGetDetail" resultType="com.vam.model.BookVO">
		select bookId
			, bookName
			, (select authorName from vam_author where authorId =vam_book.authorId) as authorName
			, authorId
			, publeYear
			, publisher
			, cateCode
			, bookPrice
			, bookStock
			, bookDiscount
			, bookIntro
			, bookContents
			, regDate
			, updateDate 
		from vam_book where bookId = #{bookId}
	</select>
	
		<!-- 상품 정보 수정 -->
	<update id="goodsModify">
		update vam_book set
			bookName = #{bookName}
			, authorId = #{authorId}
			, publeYear = #{publeYear}
			, publisher = #{publisher}
			, cateCode = ${cateCode}
			, bookPrice = #{bookPrice}
			, bookStock = #{bookStock}
			, bookDiscount = #{bookDiscount}
			, bookIntro = #{bookIntro}
			, bookContents = #{bookContents}
			, updateDate = now()
		where bookId = ${bookId}
	</update>
	
	<!-- 상품 정보 삭제 -->
	<delete id="goodsDelete">
		delete
		from vam_book
		where bookId = #{bookId}
	</delete>
	
	<!-- 이미지 등록 -->
	<insert id="imageEnroll">
		insert into vam_image(
			bookId
			, fileName
			, uploadPath
			, uuid
		) values (
			#{bookId}
			, #{fileName}
			, #{uploadPath}
			, #{uuid})
	</insert>

</mapper>